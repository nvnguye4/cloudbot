name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform init
      working-directory: terraform-ec2

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: terraform-ec2

    - name: Get EC2 Instance IP
      id: ec2
      run: echo "EC2_IP=$(terraform output -raw public_ip | tr -d '\r')" >> $GITHUB_ENV
      working-directory: terraform-ec2

    - name: Deploy Docker Containers
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_INSTANCE_IP }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          sudo yum update -y
          sudo yum install -y docker
          sudo service docker start
          sudo usermod -aG docker ec2-user
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          
          # AWS ECR Login
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin <AWS_ACCOUNT_ID>.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

          # Pull Docker images
          docker pull <your-dockerhub-username>/cloudbot:latest
          docker pull redis:latest

          # Run the containers
          docker network create bot-network || true
          docker stop cloud-bot || true
          docker rm cloud-bot || true
          docker stop redis-cache || true
          docker rm redis-cache || true
          docker run -d --name redis-cache --network bot-network -p 6379:6379 redis:latest
          docker run -d --name cloud-bot --network bot-network -e BOT_TOKEN=$(aws ssm get-parameter --name "BOT_TOKEN" --with-decryption --query "Parameter.Value" --output text) -e REDIS_HOST=redis -e REDIS_PORT=6379 <your-dockerhub-username>/cloudbot:latest